# Vector Database System with Permission Management Makefile

.PHONY: help build up down logs health test clean rebuild

# Colors for output
GREEN=\033[0;32m
YELLOW=\033[1;33m
RED=\033[0;31m
BLUE=\033[0;34m
NC=\033[0m # No Color

# Default target
help:
	@echo "$(GREEN)Vector Database System with Permission Management$(NC)"
	@echo ""
	@echo "$(YELLOW)Available targets:$(NC)"
	@echo "  build        - Build all vector system containers"
	@echo "  up           - Start vector database system"
	@echo "  down         - Stop vector database system"
	@echo "  logs         - View logs from all services"
	@echo "  logs-vector  - View logs from vector DB service"
	@echo "  logs-docs    - View logs from document processing service"
	@echo "  logs-perm    - View logs from permission service"
	@echo "  logs-milvus  - View logs from Milvus vector database"
	@echo "  health       - Check health of all services"
	@echo "  test         - Run comprehensive system tests"
	@echo "  demo         - Run demo workflow"
	@echo "  clean        - Remove containers and volumes"
	@echo "  rebuild      - Clean and rebuild everything"
	@echo "  shell-vector - Open shell in vector DB service container"
	@echo "  shell-docs   - Open shell in document processing container"
	@echo "  shell-perm   - Open shell in permission service container"

# Build all containers
build:
	@echo "$(GREEN)Building vector database system containers...$(NC)"
	docker-compose -f docker-compose.vector-system.yml build --no-cache

# Start services
up:
	@echo "$(GREEN)Starting vector database system...$(NC)"
	docker-compose -f docker-compose.vector-system.yml up -d
	@echo "$(YELLOW)Waiting for services to be ready...$(NC)"
	@sleep 30
	@$(MAKE) -f Makefile.vector-system health

# Start services with logs
up-logs:
	@echo "$(GREEN)Starting vector database system with logs...$(NC)"
	docker-compose -f docker-compose.vector-system.yml up

# Stop services
down:
	@echo "$(GREEN)Stopping vector database system...$(NC)"
	docker-compose -f docker-compose.vector-system.yml down

# View logs from all services
logs:
	docker-compose -f docker-compose.vector-system.yml logs -f

# View logs from specific services
logs-vector:
	docker-compose -f docker-compose.vector-system.yml logs -f vector-db-service

logs-docs:
	docker-compose -f docker-compose.vector-system.yml logs -f document-processing-service

logs-perm:
	docker-compose -f docker-compose.vector-system.yml logs -f permission-service

logs-milvus:
	docker-compose -f docker-compose.vector-system.yml logs -f milvus

logs-proxy:
	docker-compose -f docker-compose.vector-system.yml logs -f vector-proxy

# Health checks
health:
	@echo "$(GREEN)Checking vector database system health...$(NC)"
	@echo "$(BLUE)Checking Permission Service...$(NC)"
	@curl -s -f http://localhost:8005/health > /dev/null && echo "$(GREEN)Permission Service: OK$(NC)" || echo "$(RED)Permission Service: FAIL$(NC)"
	@echo "$(BLUE)Checking Document Processing Service...$(NC)"
	@curl -s -f http://localhost:8004/health > /dev/null && echo "$(GREEN)Document Processing: OK$(NC)" || echo "$(RED)Document Processing: FAIL$(NC)"
	@echo "$(BLUE)Checking Vector DB Service...$(NC)"
	@curl -s -f http://localhost:8003/health > /dev/null && echo "$(GREEN)Vector DB Service: OK$(NC)" || echo "$(RED)Vector DB Service: FAIL$(NC)"
	@echo "$(BLUE)Checking Milvus Vector Database...$(NC)"
	@curl -s -f http://localhost:9091/healthz > /dev/null && echo "$(GREEN)Milvus: OK$(NC)" || echo "$(RED)Milvus: FAIL$(NC)"
	@echo "$(BLUE)Checking System Proxy...$(NC)"
	@curl -s -f http://localhost:8090/health > /dev/null && echo "$(GREEN)System Proxy: OK$(NC)" || echo "$(RED)System Proxy: FAIL$(NC)"

# Comprehensive system tests
test:
	@echo "$(GREEN)Running vector database system tests...$(NC)"
	@echo "$(BLUE)Testing Permission Service...$(NC)"
	@curl -s -X POST http://localhost:8005/api/v1/users \
		-H "Content-Type: application/json" \
		-d '{"username": "test_user", "email": "test@example.com", "full_name": "Test User", "department": "engineering", "roles": ["employee"]}' \
		> /tmp/user_test.json && echo "$(GREEN)✅ User creation test passed$(NC)" || echo "$(RED)❌ User creation test failed$(NC)"
	
	@echo "$(BLUE)Testing Document Processing...$(NC)"
	@curl -s -f http://localhost:8004/api/v1/formats > /dev/null && echo "$(GREEN)✅ Document formats endpoint test passed$(NC)" || echo "$(RED)❌ Document formats test failed$(NC)"
	
	@echo "$(BLUE)Testing Vector DB Service...$(NC)"
	@curl -s -f http://localhost:8003/api/v1/stats > /dev/null && echo "$(GREEN)✅ Vector stats endpoint test passed$(NC)" || echo "$(RED)❌ Vector stats test failed$(NC)"
	
	@echo "$(BLUE)Testing System Integration via Proxy...$(NC)"
	@curl -s -f http://localhost:8090/health/vector-db > /dev/null && echo "$(GREEN)✅ Proxy integration test passed$(NC)" || echo "$(RED)❌ Proxy integration test failed$(NC)"

# Demo workflow
demo:
	@echo "$(GREEN)Running Vector Database System Demo...$(NC)"
	@echo "$(BLUE)Step 1: Creating test user...$(NC)"
	@curl -s -X POST http://localhost:8005/api/v1/users \
		-H "Content-Type: application/json" \
		-d '{"username": "demo_user", "email": "demo@example.com", "full_name": "Demo User", "department": "finance", "clearance_level": "confidential", "roles": ["employee", "finance"]}' \
		| python3 -c "import sys, json; print('User ID:', json.load(sys.stdin)['id'])" 2>/dev/null || echo "User may already exist"
	
	@echo "$(BLUE)Step 2: Checking supported document formats...$(NC)"
	@curl -s http://localhost:8004/api/v1/formats | python3 -m json.tool | head -20
	
	@echo "$(BLUE)Step 3: Getting chunking templates...$(NC)"
	@curl -s http://localhost:8004/api/v1/chunking/templates | python3 -c "import sys, json; data=json.load(sys.stdin); print('Available templates:', list(data['templates'].keys()))"
	
	@echo "$(BLUE)Step 4: Checking vector database stats...$(NC)"
	@curl -s http://localhost:8003/api/v1/stats | python3 -m json.tool
	
	@echo "$(BLUE)Step 5: System status via proxy...$(NC)"
	@curl -s http://localhost:8090/ | python3 -m json.tool

# Clean up containers and volumes
clean:
	@echo "$(GREEN)Cleaning up vector database system...$(NC)"
	docker-compose -f docker-compose.vector-system.yml down -v --remove-orphans
	docker system prune -f
	@echo "$(YELLOW)Removing unused images...$(NC)"
	docker image prune -f

# Rebuild everything
rebuild: clean build up

# Shell access
shell-vector:
	docker-compose -f docker-compose.vector-system.yml exec vector-db-service /bin/bash

shell-docs:
	docker-compose -f docker-compose.vector-system.yml exec document-processing-service /bin/bash

shell-perm:
	docker-compose -f docker-compose.vector-system.yml exec permission-service /bin/bash

shell-db:
	docker-compose -f docker-compose.vector-system.yml exec permission-db psql -U permission_user -d permissions

# Database operations
db-reset:
	@echo "$(YELLOW)Warning: This will reset the permission database!$(NC)"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	echo ""; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		docker-compose -f docker-compose.vector-system.yml exec permission-db psql -U permission_user -d permissions -c "TRUNCATE users, roles, permissions, policies RESTART IDENTITY CASCADE;"; \
		echo "$(GREEN)Database reset completed$(NC)"; \
	else \
		echo "$(YELLOW)Database reset cancelled$(NC)"; \
	fi

# Quick status check
status:
	@echo "$(GREEN)Vector Database System Status:$(NC)"
	docker-compose -f docker-compose.vector-system.yml ps

# View running containers
ps:
	docker-compose -f docker-compose.vector-system.yml ps

# Show resource usage
stats:
	docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.PIDs}}" --no-stream

# Performance test
perf-test:
	@echo "$(GREEN)Running performance tests...$(NC)"
	@echo "$(BLUE)Testing concurrent document processing...$(NC)"
	@for i in {1..5}; do \
		curl -s http://localhost:8004/api/v1/formats > /dev/null & \
	done; \
	wait; \
	echo "$(GREEN)Concurrent requests completed$(NC)"
	
	@echo "$(BLUE)Testing vector search performance...$(NC)"
	@time curl -s http://localhost:8003/api/v1/stats > /dev/null && echo "$(GREEN)Vector DB response time measured$(NC)"

# Development helpers
dev-setup:
	@echo "$(GREEN)Setting up development environment...$(NC)"
	@mkdir -p uploads logs
	@echo "$(GREEN)Development directories created$(NC)"

# Backup system data
backup:
	@echo "$(GREEN)Creating system backup...$(NC)"
	@mkdir -p backups/$(shell date +%Y%m%d_%H%M%S)
	docker-compose -f docker-compose.vector-system.yml exec permission-db pg_dump -U permission_user permissions > backups/$(shell date +%Y%m%d_%H%M%S)/permissions_backup.sql
	@echo "$(GREEN)Backup completed in backups/$(shell date +%Y%m%d_%H%M%S)$(NC)"